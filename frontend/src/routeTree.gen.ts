/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const ZetaLazyImport = createFileRoute('/zeta')()
const TestLazyImport = createFileRoute('/test')()
const CoastLazyImport = createFileRoute('/coast')()

// Create/Update Routes

const ZetaLazyRoute = ZetaLazyImport.update({
  path: '/zeta',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/zeta.lazy').then((d) => d.Route))

const TestLazyRoute = TestLazyImport.update({
  path: '/test',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/test.lazy').then((d) => d.Route))

const CoastLazyRoute = CoastLazyImport.update({
  path: '/coast',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/coast.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/coast': {
      id: '/coast'
      path: '/coast'
      fullPath: '/coast'
      preLoaderRoute: typeof CoastLazyImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestLazyImport
      parentRoute: typeof rootRoute
    }
    '/zeta': {
      id: '/zeta'
      path: '/zeta'
      fullPath: '/zeta'
      preLoaderRoute: typeof ZetaLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/coast': typeof CoastLazyRoute
  '/test': typeof TestLazyRoute
  '/zeta': typeof ZetaLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/coast': typeof CoastLazyRoute
  '/test': typeof TestLazyRoute
  '/zeta': typeof ZetaLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/coast': typeof CoastLazyRoute
  '/test': typeof TestLazyRoute
  '/zeta': typeof ZetaLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/coast' | '/test' | '/zeta'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/coast' | '/test' | '/zeta'
  id: '__root__' | '/' | '/coast' | '/test' | '/zeta'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CoastLazyRoute: typeof CoastLazyRoute
  TestLazyRoute: typeof TestLazyRoute
  ZetaLazyRoute: typeof ZetaLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CoastLazyRoute: CoastLazyRoute,
  TestLazyRoute: TestLazyRoute,
  ZetaLazyRoute: ZetaLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/coast",
        "/test",
        "/zeta"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/coast": {
      "filePath": "coast.lazy.tsx"
    },
    "/test": {
      "filePath": "test.lazy.tsx"
    },
    "/zeta": {
      "filePath": "zeta.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
