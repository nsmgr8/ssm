/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ZetaImport } from './routes/zeta'
import { Route as CoastImport } from './routes/coast'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const TestLazyImport = createFileRoute('/test')()

// Create/Update Routes

const TestLazyRoute = TestLazyImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/test.lazy').then((d) => d.Route))

const ZetaRoute = ZetaImport.update({
  id: '/zeta',
  path: '/zeta',
  getParentRoute: () => rootRoute,
} as any)

const CoastRoute = CoastImport.update({
  id: '/coast',
  path: '/coast',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/coast': {
      id: '/coast'
      path: '/coast'
      fullPath: '/coast'
      preLoaderRoute: typeof CoastImport
      parentRoute: typeof rootRoute
    }
    '/zeta': {
      id: '/zeta'
      path: '/zeta'
      fullPath: '/zeta'
      preLoaderRoute: typeof ZetaImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/coast': typeof CoastRoute
  '/zeta': typeof ZetaRoute
  '/test': typeof TestLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/coast': typeof CoastRoute
  '/zeta': typeof ZetaRoute
  '/test': typeof TestLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/coast': typeof CoastRoute
  '/zeta': typeof ZetaRoute
  '/test': typeof TestLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/coast' | '/zeta' | '/test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/coast' | '/zeta' | '/test'
  id: '__root__' | '/' | '/coast' | '/zeta' | '/test'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CoastRoute: typeof CoastRoute
  ZetaRoute: typeof ZetaRoute
  TestLazyRoute: typeof TestLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CoastRoute: CoastRoute,
  ZetaRoute: ZetaRoute,
  TestLazyRoute: TestLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/coast",
        "/zeta",
        "/test"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/coast": {
      "filePath": "coast.tsx"
    },
    "/zeta": {
      "filePath": "zeta.tsx"
    },
    "/test": {
      "filePath": "test.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
